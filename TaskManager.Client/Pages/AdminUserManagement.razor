@page "/admin/users"
@using MudBlazor
@inject ApiService ApiService
@inject NavigationManager Navigation

@if (!ApiService.IsAdmin)
{
    <MudPaper Class="pa-6 mx-auto mt-12" MaxWidth="400px">
        <MudText Typo="Typo.h6" Color="Color.Error">Access Denied: Admins only.</MudText>
    </MudPaper>
}
else
{
    <MudPaper Class="pa-6 mx-auto mt-8" MaxWidth="800px">
        <MudText Typo="Typo.h5" Class="mb-4">User Management</MudText>
        <MudTable Items="users" Hover="true">
            <HeaderContent>
                <MudTh>Username</MudTh>
                <MudTh>Role</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Username</MudTd>
                <MudTd>@context.Role</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteUser(context.Id)">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudDivider Class="my-4" />
        <MudText Typo="Typo.h6">Create New User</MudText>
        <MudTextField @bind-Value="newUsername" Label="Username" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="newPassword" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" />
        <MudSelect @bind-Value="newRole" Label="Role" Variant="Variant.Outlined">
            <MudSelectItem Value="User">User</MudSelectItem>
            <MudSelectItem Value="Admin">Admin</MudSelectItem>
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateUser" Class="mt-2">Create User</MudButton>
        <MudSnackbarProvider />
    </MudPaper>
}

@code {
    List<ApiService.UserDto> users = new();
    string newUsername = string.Empty;
    string newPassword = string.Empty;
    string newRole = "User";

    protected override async Task OnInitializedAsync()
    {
        if (ApiService.IsAdmin)
            users = await ApiService.GetAllUsersAsync();
    }

    async Task CreateUser()
    {
        var created = await ApiService.CreateUserAsync(newUsername, newPassword, newRole);
        if (created != null)
        {
            users.Add(created);
            newUsername = string.Empty;
            newPassword = string.Empty;
            newRole = "User";
            Snackbar.Add("User created successfully!", Severity.Success);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Failed to create user.", Severity.Error);
        }
    }

    async Task DeleteUser(int id)
    {
        var success = await ApiService.DeleteUserAsync(id);
        if (success)
        {
            users = users.Where(u => u.Id != id).ToList();
            Snackbar.Add("User deleted.", Severity.Success);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Failed to delete user.", Severity.Error);
        }
    }

    [CascadingParameter] public ISnackbar Snackbar { get; set; }
} 
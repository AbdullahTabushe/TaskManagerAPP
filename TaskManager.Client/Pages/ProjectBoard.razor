@page "/projects/{ProjectId:int}"
@using MudBlazor
@inject ApiService ApiService
@inject NavigationManager Navigation

@if (!ApiService.IsAuthenticated)
{
    Navigation.NavigateTo("/login", true);
}
else
{
    <MudPaper Class="pa-6 mx-auto mt-8" MaxWidth="1200px">
        <MudText Typo="Typo.h5" Class="mb-4">Project Board</MudText>
        <MudButton Variant="Variant.Outlined" OnClick="GoBack">Back to Projects</MudButton>
        <MudGrid Class="mt-4">
            @foreach (var status in Statuses)
            {
                <MudItem xs="12" sm="4">
                    <MudPaper Class="pa-2" Style="min-height: 400px;">
                        <MudText Typo="Typo.h6">@status</MudText>
                        <MudDivider />
                        @if (!Tasks.Any(t => t.Status == status))
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">No tasks in this column.</MudText>
                        }
                        @foreach (var task in Tasks.Where(t => t.Status == status))
                        {
                            <MudCard Class="my-2">
                                <MudCardContent>
                                    <MudText Typo="Typo.subtitle1">@task.Title</MudText>
                                    <MudText Typo="Typo.body2">@task.Description</MudText>
                                    <MudText Typo="Typo.caption">Due: @task.DueDate.ToShortDateString()</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    @foreach (var moveStatus in Statuses.Where(s => s != status))
                                    {
                                        <MudButton Variant="Variant.Text" OnClick="() => MoveTask(task.Id, moveStatus)">@moveStatus</MudButton>
                                    }
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteTask(task.Id)">Delete</MudButton>
                                </MudCardActions>
                            </MudCard>
                        }
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => ShowAddTask(status)">Add Task</MudButton>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
    <MudDialog @bind-IsOpen="showAddTaskDialog">
        <DialogContent>
            <MudTextField @bind-Value="newTaskTitle" Label="Title" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="newTaskDesc" Label="Description" Variant="Variant.Outlined" />
            <MudDatePicker @bind-Date="newTaskDueDate" Label="Due Date" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="AddTask" Color="Color.Primary">Add</MudButton>
            <MudButton OnClick="() => showAddTaskDialog = false">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
    <MudSnackbarProvider />
}

@code {
    [Parameter] public int ProjectId { get; set; }
    List<ApiService.TaskDto> Tasks = new();
    string[] Statuses = new[] { "ToDo", "InProgress", "Done" };
    bool showAddTaskDialog = false;
    string newTaskTitle = string.Empty;
    string newTaskDesc = string.Empty;
    DateTime? newTaskDueDate = DateTime.Today.AddDays(1);
    string addTaskStatus = "ToDo";

    protected override async Task OnInitializedAsync()
    {
        if (ApiService.IsAuthenticated)
            Tasks = await ApiService.GetTasksAsync(ProjectId);
    }

    void GoBack() => Navigation.NavigateTo("/projects");

    void ShowAddTask(string status)
    {
        addTaskStatus = status;
        showAddTaskDialog = true;
    }

    async Task AddTask()
    {
        var created = await ApiService.CreateTaskAsync(ProjectId, newTaskTitle, newTaskDesc, newTaskDueDate ?? DateTime.Today.AddDays(1), addTaskStatus);
        if (created != null)
        {
            Tasks.Add(created);
            showAddTaskDialog = false;
            newTaskTitle = string.Empty;
            newTaskDesc = string.Empty;
            Snackbar.Add("Task added!", Severity.Success);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Failed to add task.", Severity.Error);
        }
    }

    async Task MoveTask(int taskId, string newStatus)
    {
        var updated = await ApiService.UpdateTaskStatusAsync(taskId, newStatus);
        if (updated)
        {
            var task = Tasks.FirstOrDefault(t => t.Id == taskId);
            if (task != null) task.Status = newStatus;
            Snackbar.Add("Task updated!", Severity.Success);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Failed to update task.", Severity.Error);
        }
    }

    async Task DeleteTask(int taskId)
    {
        var success = await ApiService.DeleteTaskAsync(taskId);
        if (success)
        {
            Tasks = Tasks.Where(t => t.Id != taskId).ToList();
            Snackbar.Add("Task deleted.", Severity.Success);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Failed to delete task.", Severity.Error);
        }
    }

    [CascadingParameter] public ISnackbar Snackbar { get; set; }
} 
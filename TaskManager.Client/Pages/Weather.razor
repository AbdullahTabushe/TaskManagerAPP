@page "/weather"
@using MudBlazor
@inject HttpClient Http

<MudPaper Class="pa-6 mx-auto mt-8" MaxWidth="600px">
    <MudText Typo="Typo.h5" Class="mb-4">Weather</MudText>
    <MudText Typo="Typo.body1" Class="mb-4">This component demonstrates fetching data from the server.</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Style="width:40px;height:40px" Class="my-4" />
        <MudText Typo="Typo.body2">Loading...</MudText>
    }
    else if (errorMsg != null)
    {
        <MudAlert Severity="Severity.Error">@errorMsg</MudAlert>
    }
    else if (forecasts == null || forecasts.Length == 0)
    {
        <MudText Typo="Typo.body2" Color="Color.Secondary">No weather data available.</MudText>
    }
    else
    {
        <MudTable Items="forecasts" Hover="true">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Temp. (C)</MudTh>
                <MudTh>Temp. (F)</MudTh>
                <MudTh>Summary</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
                <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
                <MudTd DataLabel="Summary">@context.Summary</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private WeatherForecast[]? forecasts;
    private bool isLoading = true;
    private string? errorMsg;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        }
        catch (Exception ex)
        {
            errorMsg = $"Failed to load weather data: {ex.Message}";
        }
        isLoading = false;
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}

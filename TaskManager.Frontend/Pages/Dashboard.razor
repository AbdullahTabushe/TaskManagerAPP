@page "/dashboard"
@using TaskManager.Frontend.Models
@using TaskManager.Frontend.Services
@using TaskManager.Frontend.Shared
@inject IAuthService AuthService
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Dashboard</PageTitle>

@if (!isAuthenticated)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="jumbotron bg-light p-5 rounded">
                    <h1 class="display-4">Welcome to Task Manager</h1>
                    <p class="lead">Manage your projects and tasks efficiently with our comprehensive task management system.</p>
                    <hr class="my-4">
                    <p>Get started by logging in to your account or creating a new one.</p>
                    <a class="btn btn-primary btn-lg" href="/login" role="button">Login</a>
                    <a class="btn btn-success btn-lg ms-2" href="/register" role="button">Register</a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
                
            <div>
                <button class="btn btn-primary" @onclick="ShowCreateProjectModal">
                    <i class="bi bi-plus-circle"></i> New Project
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <!-- Project Search and Filters -->
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="Search projects..." 
                           @bind="searchQuery" @bind:event="oninput" @onkeyup="OnSearchChanged">
                    @if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                            <i class="bi bi-x"></i>
                        </button>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex justify-content-end align-items-center">
                    <label class="form-label me-2 mb-0">Sort by:</label>
                    <select class="form-select form-select-sm me-2" style="width: auto;" @onchange="OnSortChanged">
                        <option value="name">Name</option>
                        <option value="created">Date Created</option>
                    </select>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleSortDirection">
                        <i class="bi @(isDescending ? "bi-sort-down" : "bi-sort-up")"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Dashboard Statistics -->
        @if (statistics != null)
        {
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white h-100">
                        <div class="card-body d-flex align-items-center">
                            <div class="flex-grow-1">
                                <h4 class="mb-0">@statistics.TotalProjects</h4>
                                <small>Total Projects</small>
                            </div>
                            <div class="text-end">
                                <i class="bi bi-folder-fill fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white h-100">
                        <div class="card-body d-flex align-items-center">
                            <div class="flex-grow-1">
                                <h4 class="mb-0">@statistics.CompletedTasks</h4>
                                <small>Completed Tasks</small>
                            </div>
                            <div class="text-end">
                                <i class="bi bi-check-circle-fill fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-white h-100">
                        <div class="card-body d-flex align-items-center">
                            <div class="flex-grow-1">
                                <h4 class="mb-0">@statistics.UpcomingDeadlines</h4>
                                <small>Due Soon</small>
                            </div>
                            <div class="text-end">
                                <i class="bi bi-clock-fill fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-white h-100">
                        <div class="card-body d-flex align-items-center">
                            <div class="flex-grow-1">
                                <h4 class="mb-0">@statistics.OverdueTasks</h4>
                                <small>Overdue Tasks</small>
                            </div>
                            <div class="text-end">
                                <i class="bi bi-exclamation-triangle-fill fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Task Status Breakdown -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Task Status Overview</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4 text-center">
                                    <div class="p-3">
                                        <h3 class="text-warning">@statistics.PendingTasks</h3>
                                        <span class="text-muted">Pending</span>
                                    </div>
                                </div>
                                <div class="col-md-4 text-center">
                                    <div class="p-3">
                                        <h3 class="text-info">@statistics.InProgressTasks</h3>
                                        <span class="text-muted">In Progress</span>
                                    </div>
                                </div>
                                <div class="col-md-4 text-center">
                                    <div class="p-3">
                                        <h3 class="text-success">@statistics.CompletedTasks</h3>
                                        <span class="text-muted">Completed</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Assigned Tasks Section -->
            @if (myTasks != null && myTasks.Any())
            {
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="bi bi-person-check text-primary"></i> Assigned Tasks
                                    <span class="badge bg-primary ms-2">@myTasks.Count</span>
                                </h5>
                            </div>
                            <div class="card-body">
                               <TaskList Tasks="myTasks" ShowProjectName="true" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        @if (isLoading)
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading projects...</p>
            </div>
        }
        else if (filteredProjects.Any())
        {
            <div class="row">
                @foreach (var project in paginatedProjects)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">@project.Name</h5>
                                <p class="card-text">@project.Description</p>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-outline-primary" @onclick="() => ViewTasks(project.Id)">
                                        <i class="bi bi-list-task"></i> Tasks
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="() => EditProject(project)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteProject(project.Id)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination Controls -->
            @if (totalPages > 1)
            {
                <nav aria-label="Projects pagination" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                <i class="bi bi-chevron-left"></i> Previous
                            </button>
                        </li>
                        
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            int pageNum = i; // Capture for lambda
                            <li class="page-item @(currentPage == pageNum ? "active" : "")">
                                <button class="page-link" @onclick="() => GoToPage(pageNum)">@pageNum</button>
                            </li>
                        }
                        
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                Next <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
                
                <div class="text-center text-muted">
                    <small>
                        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredProjects.Count()) 
                        of @filteredProjects.Count() projects
                        @if (!string.IsNullOrEmpty(searchQuery))
                        {
                            <span>(filtered from @projects.Count total)</span>
                        }
                    </small>
                </div>
            }
        }
        else
        {
            <div class="text-center mt-5">
                @if (!string.IsNullOrEmpty(searchQuery))
                {
                    <h4>No projects match "@searchQuery"</h4>
                    <p class="text-muted">Try adjusting your search terms or create a new project.</p>
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <i class="bi bi-x-circle"></i> Clear Search
                    </button>
                }
                else
                {
                    <h4>No projects found</h4>
                    <p class="text-muted">Get started by creating your first project!</p>
                }
                <button class="btn btn-primary btn-lg ms-2" @onclick="ShowCreateProjectModal">
                    <i class="bi bi-plus-circle"></i> Create Project
                </button>
            </div>
        }
    </div>

    <!-- Create/Edit Project Modal -->
    @if (showProjectModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(editingProject != null ? "Edit Project" : "Create New Project")</h5>
                        <button type="button" class="btn-close" @onclick="CloseProjectModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@projectModel" OnValidSubmit="@HandleProjectSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label for="projectName" class="form-label">Project Name</label>
                                <InputText @bind-Value="projectModel.Name" class="form-control" id="projectName" />
                                <ValidationMessage For="@(() => projectModel.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="projectDescription" class="form-label">Description</label>
                                <InputTextArea @bind-Value="projectModel.Description" class="form-control" id="projectDescription" rows="3" />
                                <ValidationMessage For="@(() => projectModel.Description)" />
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseProjectModal">Cancel</button>
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <text> @(editingProject != null ? "Updating..." : "Creating...")</text>
                                    }
                                    else
                                    {
                                        <text>@(editingProject != null ? "Update" : "Create")</text>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private bool isAuthenticated = false;
    private bool isLoading = true;
    private string? username;
    private List<ProjectReadDto> projects = new();
    private bool showProjectModal = false;
    private bool isSubmitting = false;
    private ProjectCreateDto projectModel = new();
    private ProjectReadDto? editingProject = null;
    private DashboardStatistics? statistics = null;
    private List<TaskReadDto> myTasks = new();
    private string? errorMessage;

    
    // Pagination and filtering
    private string searchQuery = "";
    private string sortBy = "name";
    private bool isDescending = false;
    private int currentPage = 1;
    private int pageSize = 6; // Show 6 projects per page for nice grid layout
    private int totalPages => (int)Math.Ceiling((double)filteredProjects.Count() / pageSize);
    
    // Computed properties for filtering and pagination
    private IEnumerable<ProjectReadDto> filteredProjects
    {
        get
        {
            var filtered = projects.AsEnumerable();
            
            // Apply search filter
            if (!string.IsNullOrEmpty(searchQuery))
            {
                filtered = filtered.Where(p => 
                    p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    p.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
            }
            
            // Apply sorting
            filtered = sortBy switch
            {
                "created" => isDescending 
                    ? filtered.OrderByDescending(p => p.Id) 
                    : filtered.OrderBy(p => p.Id),
                _ => isDescending 
                    ? filtered.OrderByDescending(p => p.Name) 
                    : filtered.OrderBy(p => p.Name)
            };
            
            return filtered;
        }
    }
    
    private IEnumerable<ProjectReadDto> paginatedProjects =>
        filteredProjects.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CheckAuthentication();
        if (isAuthenticated)
        {
            // Load tasks FIRST to ensure the full list is available
            await LoadMyTasks();
            
            // Now load other data that might depend on tasks
            await LoadProjects();
            await LoadStatistics();
        }
        isLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        // Refresh tasks when navigating back to dashboard
        if (isAuthenticated && myTasks != null)
        {
            await LoadMyTasks();
            StateHasChanged();
        }
    }

    private async Task CheckAuthentication()
    {
        isAuthenticated = await AuthService.IsLoggedInAsync();
        if (isAuthenticated)
        {
            username = await AuthService.GetUsernameAsync();
        }
    }

    private async Task LoadProjects()
    {
        isLoading = true;
        try
        {
            projects = await ApiService.GetProjectsAsync();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            // Pass the already-loaded tasks to the statistics service
            statistics = await ApiService.GetDashboardStatisticsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }

    private async Task LoadMyTasks()
    {
        try
        {
            Console.WriteLine("Dashboard: Loading assigned tasks...");
            myTasks = await ApiService.GetMyTasksAsync(new QueryParameters { PageSize = 100 }) ?? new List<TaskReadDto>();
            Console.WriteLine($"Dashboard: Loaded {myTasks.Count} assigned tasks");
            
            // Log task details for debugging
            foreach (var task in myTasks)
            {
                Console.WriteLine($"Task: {task.Title} - Project: {task.ProjectName} - Status: {task.Status}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading my tasks: {ex.Message}");
            myTasks = new List<TaskReadDto>();
        }
    }



    private void ShowCreateProjectModal()
    {
        editingProject = null;
        projectModel = new ProjectCreateDto();
        showProjectModal = true;
    }

    private void EditProject(ProjectReadDto project)
    {
        editingProject = project;
        projectModel = new ProjectCreateDto
        {
            Name = project.Name,
            Description = project.Description
        };
        showProjectModal = true;
    }

    private void CloseProjectModal()
    {
        showProjectModal = false;
        editingProject = null;
        projectModel = new ProjectCreateDto();
    }

    private async Task HandleProjectSubmit()
    {
        isSubmitting = true;
        try
        {
            if (editingProject != null)
            {
                var success = await ApiService.UpdateProjectAsync(editingProject.Id, projectModel);
                if (success)
                {
                    // Find the index of the edited project and update it
                    var index = projects.FindIndex(p => p.Id == editingProject.Id);
                    if (index != -1)
                    {
                        var updatedProject = await ApiService.GetProjectByIdAsync(editingProject.Id);
                        if(updatedProject != null) projects[index] = updatedProject;
                    }
                }
            }
            else
            {
                var newProject = await ApiService.CreateProjectAsync(projectModel);
                if (newProject != null)
                {
                    projects.Add(newProject);
                }
            }
            
            CloseProjectModal();
            await LoadStatistics(); // Refresh statistics
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteProject(int projectId)
    {
        errorMessage = null;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this project and all its tasks?");
        if (!confirmed)
        {
            return;
        }

        try
        {
            var success = await ApiService.DeleteProjectAsync(projectId);
            if (success)
            {
                var projectToRemove = projects.FirstOrDefault(p => p.Id == projectId);
                if (projectToRemove != null)
                {
                    projects.Remove(projectToRemove);
                    await LoadStatistics(); // Refresh statistics
                    StateHasChanged(); // Explicitly tell Blazor to re-render
                }
            }
            else
            {
                errorMessage = "Failed to delete the project. You may not have permission or the project is already deleted.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting the project: {ex.Message}";
        }
    }

    private void ViewTasks(int projectId)
    {
        Navigation.NavigateTo($"/tasks/{projectId}");
    }

    /// <summary>
    /// Handles search input changes with debouncing
    /// </summary>
    private async Task OnSearchChanged(KeyboardEventArgs e)
    {
        currentPage = 1; // Reset to first page when searching
        StateHasChanged();
    }

    /// <summary>
    /// Clears the search query and resets pagination
    /// </summary>
    private void ClearSearch()
    {
        searchQuery = "";
        currentPage = 1;
        StateHasChanged();
    }

    /// <summary>
    /// Handles sort dropdown changes
    /// </summary>
    private void OnSortChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "name";
        currentPage = 1; // Reset to first page when sorting changes
        StateHasChanged();
    }

    /// <summary>
    /// Toggles sort direction between ascending and descending
    /// </summary>
    private void ToggleSortDirection()
    {
        isDescending = !isDescending;
        currentPage = 1; // Reset to first page when sort direction changes
        StateHasChanged();
    }

    /// <summary>
    /// Navigates to a specific page
    /// </summary>
    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }
} 